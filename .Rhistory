power.t.test(n=138, sig.level=0.1, delta=.01, sd=.04, type="one.sample", alt="one.sided")
power.t.test(n=138, sig.level=0.1, delta=.01, sd=.04, type="one.sample", alt="one.sided")
power.t.test(n=138, sig.level=0.9, delta=.01, sd=.04, type="one.sample", alt="one.sided")
power.t.test(n=138, sig.level=10, delta=.01, sd=.04, type="one.sample", alt="one.sided")
power.t.test(n=138, sig.level=0, delta=.01, sd=.04, type="one.sample", alt="one.sided")
power.t.test(n=138, sig.level=1, delta=.01, sd=.04, type="one.sample", alt="one.sided")
x <- rnorm(288, mean=44,sd=12)
y <- rnorm(288, mean=42.04,sd=12)
t.test(x-y)
x <- as.numeric(c(140, 138, 150, 148, 135))
y <- as.numeric(c(132, 135, 151, 146, 130))
t.test(x-y)
x <- rnorm(9,mean=-3,sd=1.5)
y <- rnorm(9,mean=1,sd=1.8)
t.test(x-y)
ppois(10,0.01*1787,lower.tail=TRUE)
ppois(11,0.01*1787,lower.tail=TRUE)
ppois(9,0.01*1787,lower.tail=TRUE)
power.t.test(power=.9, delta=.01, sd=.04, type="one.sample", alt="one.sided")$n
power.t.test(delta=.01, sd=.04, type="one.sample", alt="one.sided")$n
power.t.test(n=100, sig.level=0.05, delta=.01, sd=.04, type="one.sample", alt="one.sided")$n
power.t.test(n=100, sig.level=0.05, delta=.01, sd=.04, type="one.sample", alt="one.sided")
choose(4,3)*0.5^4+choose(4,4)*0.5^4
pnorm(-1.96, mean = 1, sd = 12) + pnorm(1.96, mean = 1, sd = 12)
x <- rnorm(288, mean=44,sd=12)
y <- rnorm(288, mean=42.04,sd=12)
t.test(x-y)
install.packages("UsingR", lib="C:/Program Files/R/R-3.0.3/library")
library("UsingR")
x <- c(0.18, -1.54, 0.42, 0.95)
w <- c(2, 1, 3, 1)
weighted.mean(x,w)
x <- c(0.8, 0.47, 0.51, 0.73, 0.36, 0.58, 0.57, 0.85, 0.44, 0.42)
y <- c(1.39, 0.72, 1.55, 0.48, 1.19, -1.59, 1.23, -0.65, 1.49, 0.05)
lm <- lm(y~x)
summary(lm)
summary(lm,-1)
data(mtcars)
summary(mtcars)
lm(y~x)
names(mtcars)
lm(mtcars$mpg~mtcars$wt)
x <- c(8.58, 10.46, 9.01, 9.64, 8.86)
mean(x)
sd(x)
(8,58-mean(x)/sd(x)
(8.58-mean(x)/sd(x)
)
(8.58-mean(x))/sd(x)
x <- c(0.8, 0.47, 0.51, 0.73, 0.36, 0.58, 0.57, 0.85, 0.44, 0.42)
y <- c(1.39, 0.72, 1.55, 0.48, 1.19, -1.59, 1.23, -0.65, 1.49, 0.05)
lm(y~x)
lm(y~x-1)
x <- c(0.8, 0.47, 0.51, 0.73, 0.36, 0.58, 0.57, 0.85, 0.44, 0.42)
mean(x)
library(caret)
install.packages("caret", lib="C:/Program Files/R/R-3.0.3/library")
library(AppliedPredictiveModeling)
library(caret)
data(AlzheimerDisease)
install.packages("AppliedPredictiveModeling", lib="C:/Program Files/R/R-3.0.3/library")
library(AppliedPredictiveModeling)
library(caret)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
adData
trainIndex = createDataPartition(diagnosis,p=0.5,list=FALSE)
View(trainIndex)
getModelInfo()
library(AppliedPredictiveModeling)
data(concrete)
library(caret)
set.seed(975)
inTrain = createDataPartition(mixtures$CompressiveStrength, p = 3/4)[[1]]
training = mixtures[ inTrain,]
testing = mixtures[-inTrain,]
inTrain
library(AppliedPredictiveModeling)
data(concrete)
library(caret)
set.seed(975)
inTrain = createDataPartition(mixtures$CompressiveStrength, p = 3/4)[[1]]
training = mixtures[ inTrain,]
testing = mixtures[-inTrain,]
names(mixtures)
View(mixtures)
View(concrete)
summary(mixtures)
qplot(CompressiveStrength,data=mixtures, colour=c("Cement"))
qplot(CompressiveStrength,data=mixtures, colour=c("Cement", "BlastFurnaceSlag"))
qplot(CompressiveStrength,data=mixtures, colour=c("Cement", "BlastFurnaceSlag"), goem="density")
qplot(CompressiveStrength,data=mixtures, colour=Cement, goem="density")
qplot(CompressiveStrength,data=mixtures, colour=Cement, geom="density")
qplot(CompressiveStrength, colour=Cement, data=mixtures, geom="density")
cutIndex <- cut2(training$rownames)
install.packages("Hmisc", lib="C:/Program Files/R/R-3.0.3/library")
library (Hmisc)
cutIndex <- cut2(training$rownames)
cutIndex <- cut2(training$rownames, g=4)
training$rownames
plot(CompressiveStrength,data=mixtures)
plot(mixtures$CompressiveStrength)
plot(x, mixtures$CompressiveStrength, col)
plot(x, mixtures$CompressiveStrength)
plot(, mixtures$CompressiveStrength)
rownames(mixtures)
cut(rownames(training), breaks = 3, labels = c("small", "medium", "large"))
plot(, training$CompressiveStrength)
plot(training$CompressiveStrength)
index(training)
class(rownames(training))
class(as.numeric(rownames(training)))
cut2(as.numeric(rownames(training)), g=4)
cutIndex <- cut2(as.numeric(rownames(training)), g=4)
qplot(training$CompressiveStrength, col=cutIndex)
plot(training$CompressiveStrength, col=cutIndex)
plot(training$CompressiveStrength, col=age)
plot(training$CompressiveStrength, col=training$age)
plot(training$CompressiveStrength, col=training$Age)
plot(training$CompressiveStrength, col=training$FlyAsh)
plot(training$CompressiveStrength, col=training$Cement)
cutCement <- cut2(training$Cement, g=4)
plot(training$CompressiveStrength, col=training$cutCement)
cutAge <- cut2(training$Age, g=4)
plot(training$CompressiveStrength, col=training$cutAge)
cutAge
plot(training$CompressiveStrength, col=training$cutIndex)
plot(training$CompressiveStrength)
plot(training$CompressiveStrength, col=cutIndex)
plot(training$CompressiveStrength, col=cutAge)
cutFlyAsh <- cut2(training$FlyAsh, g=4)
plot(training$CompressiveStrength, col=cutFlyAsh)
plot(training$Age, training$CompressiveStrength, col=cutAge)
plot(training$CompressiveStrength, col=cutFlyAsh)
cutBlast <- cut2(training$BlastFurnaceSlag, g=4)
cutWater <- cut2(training$Water, g=4)
cutSuper <- cut2(training$Superplasticizer, g=4)
cutCoarse <- cut2(training$CoarseAggregate, g=4)
cutFine <- cut2(training$FineAggregate, g=4)
plot(training$CompressiveStrength, col=cutIndex)
plot(training$CompressiveStrength, col=cutAge)
plot(training$CompressiveStrength, col=cutCement)
plot(training$CompressiveStrength, col=cutBLast)
plot(training$CompressiveStrength, col=cutBlast)
plot(training$CompressiveStrength, col=cutFlyAsh)
plot(training$CompressiveStrength, col=cutWater)
plot(training$CompressiveStrength, col=cutSuper)
plot(training$CompressiveStrength, col=cutCoarse)
plot(training$CompressiveStrength, col=cutFine)
hist(training$Superplasticizer)
hist(log(training$Superplasticizer))
hist(log(training$Superplasticizer+1))
set.seed(3433)
library(AppliedPredictiveModeling)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
grep("IL", names(training))
idx <- grep("IL", names(training))
training[,idx]
idx
head(training[,idx])
grep("^IL", names(training))
idx <- grep("^IL", names(training))
head(training[,idx])
subTrain <- training[,idx]
tPCA <- prcomp(subTrain)
plot(tPCA$x[,1], tPCA$x[,2])
plot(tPCA$x[,1], tPCA$x[,2], tPCA$x[,3])
plot(tPCA$x)
preProc<-preProcess(subTrain,method="pca")
trainPC<-predict(preProc,subTrain)
plot(trainPC[,1], trainPC[,2])
trainPC
plot(trainPC)
length(trainPC)
modelFit<-train(training$diagnosis~.,method="glm",data=trainPC)
fit <- train(training$diagnosis~.,method="glm", data=trainPC)
preProc<-preProcess(subTrain,method="pca")
trainPC<-predict(preProc,subTrain)
training[,idx]
preProc<-preProcess(training[,idx],method="pca")
trainPC<-predict(preProc,training)
preProc<-preProcess(training[,idx],method="pca")
trainPC<-predict(preProc,training[,idx])
modelFit <- train(training$diagnosis~., method="glm", data=trainPC)
install.packages("kernlab", type="source")
install.packages("e1071")
modelFit <- train(training$diagnosis~., method="glm", data=trainPC)
confusionMatrix(training$diagnosis, predict(modelFit, trainPC))
preProc<-preProcess(training[,idx],method="pca", pcaComp=2)
trainPC<-predict(preProc,training[,idx])
modelFit <- train(training$diagnosis~., method="glm", data=trainPC)
confusionMatrix(training$diagnosis, predict(modelFit, trainPC))
preProc<-preProcess(training[,idx],method="pca", pcaComp=5)
trainPC<-predict(preProc,training[,idx])
modelFit <- train(training$diagnosis~., method="glm", data=trainPC)
confusionMatrix(training$diagnosis, predict(modelFit, trainPC))
summary(modelFit)
preProc<-preProcess(training[,idx],method="pca", thresh=0.90)
summary(preProc)
preProc<-preProcess(training[,idx],method="pca")
summary(preProc)
preProc<-preProcess(training[,idx],method="pca", thresh=0.90)
preProc$numComp
idx <- grep("^IL", names(training))
preProc<-preProcess(training[,idx],method="pca", thresh=0.80)
trainPC<-predict(preProc,training[,idx])
modelFit <- train(training$diagnosis~., method="glm", data=trainPC)
confusionMatrix(training$diagnosis, predict(modelFit, trainPC))
modelFit <- train(training$diagnosis~., method="glm", data=training[,idx])
confusionMatrix(training$diagnosis, predict(modelFit, trainPC))
confusionMatrix(training$diagnosis, predict(modelFit, training[,idx]))
A <- train(training$diagnosis~., method="glm", data=trainPC)
B <- train(training$diagnosis~., method="glm", data=training[,idx])
preProc<-preProcess(training[,idx],method="pca", thresh=0.80)
trainPC<-predict(preProc,training[,idx])
A <- train(training$diagnosis~., method="glm", data=trainPC)
confusionMatrix(training$diagnosis, predictA, trainPC))
idx <- grep("^IL", names(training))
preProc<-preProcess(training[,idx],method="pca", thresh=0.80)
trainPC<-predict(preProc,training[,idx])
A <- train(training$diagnosis~., method="glm", data=trainPC)
confusionMatrix(training$diagnosis, A, trainPC))
idx <- grep("^IL", names(training))
preProc<-preProcess(training[,idx],method="pca", thresh=0.80)
trainPC<-predict(preProc,training[,idx])
A <- train(training$diagnosis~., method="glm", data=trainPC)
confusionMatrix(training$diagnosis, A, trainPC)
idx <- grep("^IL", names(training))
preProc<-preProcess(training[,idx],method="pca", thresh=0.80)
trainPC<-predict(preProc,training[,idx])
modelFit <- train(training$diagnosis~., method="glm", data=trainPC)
testPC <- predict(preProc,testing[,idx])
confusionMatrix(testing$diagnosis, predict(modelFit, testPC))
idx <- grep("^IL", names(training))
preProc<-preProcess(training[,idx])
trainPC<-predict(preProc,training[,idx])
modelFit <- train(training$diagnosis~., method="glm", data=trainPC)
testPC <- predict(preProc,testing[,idx])
confusionMatrix(testing$diagnosis, predict(modelFit, testPC))
search()
library(devtools)
library(slidify)
install_github('slidify','ramnathv')
install_github('slidifyLibraries','ramnathv')
library(slidify)
setwd('C:\\epsychog\\Trainings & Events\\Data Science\\Data Science Specialisation (coursera)\\7. Regression Models\\CourseProject')
attach(mtcars)
mpg
boxplot(mpg~am,data=mtcars)
am <- rep("Automatic", length(am))
data <- mtcars
am[data$am==1] <- "Manual"
data$am <- factor(am)
boxplot(mpg~am,data=data)
data <- mtcars
data$am[data$am==1] <- "Manual"
data$am[data$am==0] <- "Automatic"
boxplot(mpg~am,data=data)
boxplot(mpg~am,data=data)
stem(mpg)
barplot(am)
barplot(table(am))
mean(mpg[am==0])
mean(mtcars$mpg[mtcars$am==0])
mean(mtcars$mpg[mtcars$am==1])
sd(mtcars$mpg[mtcars$am==1])
sd(mtcars$mpg[mtcars$am==0])
hist(mtcars$mpg[mtcars$am==0])
hist(mtcars$mpg[mtcars$am==1])
cor(mpg,am)
cor(mtcars$mpg,mtcars$am)
cor(mtcars$mpg,mtcars$cyl)
cor(mtcars$mpg,mtcars$disp)
cor(mtcars$mpg,mtcars$hp)
cor(mtcars$mpg,mtcars$wt)
cor(mtcars$mpg,mtcars$gear)
cor(mtcars$mpg,mtcars$carb)
cor(mtcars$mpg,mtcars$vs)
cor(mtcars$mpg,mtcars$qsec)
cor(mtcars$mpg,mtcars$drat)
cor(mtcars$cyl,mtcars$disp)
cor(mtcars$wt,mtcars$disp)
cor(mtcars$cyl,mtcars$hp)
cor(mtcars$hp,mtcars$disp)
boxplot(mpg~am,data=data, main="Consumption (MPG) by Transmission", xlab="Transmission", ylab="Miles/Gallon", col="lightgreen")
boxplot(mpg~am,data=data, main="Consumption (MPG) per Transmission type", xlab="Transmission", ylab="Miles/Gallon", col="lightgreen")
cor(mtcars$mpg,mtcars$am)
cor.test(mtcars$mpg,mtcars$am)
mean(mtcars$mpg[mtcars$am==1])
mean(mtcars$mpg[mtcars$am==0])
fit1 <- lm(mtcars$mpg~mtcars$am)
plot(fit1)
abline(fit1,lwd=2,col="blue")
plot(fit1)
summary(fit1)
anova(fit1)
t.test(mtcars$mpg,mtcars$am)
t.test(mtcars$mpg,mtcars$am, var.equal=T)
t.test(mtcars$mpg[am==0],mtcars$am[am==1])
t.test(mtcars$mpg[am==0],mtcars$mpg[am==1])
x1 <- mtcars$mpg[am==0]
x1 <- mtcars$mpg[am==1]
x0 <- mtcars$mpg[am==0]
t.test(x0,x1)
x1
mtcars$mpg[am==0]
t.test(mtcars$mpg[mtcars$am==0],mtcars$mpg[mtcars$am==1])
plot(mpg~am, data=mtcars)
abline(fit1$coefficients[1], fit1$coefficients[2], col="red", lty=2)
par(mfrow-c(2,2))
par(mfrow=c(2,2))
plot(fit1)
summary(fit1)
24.39231 - 17.147
fitAll <- lm(mtcars$mpg~.)
fitAll <- lm(mpg~.,data=mtcars)
summary(fitAll)
anova(fitAll)
fit4 <- lm(mpg~am+cyl+disp+wt,data=mtcars)
summary(fit4)
anova(fit4)
fit3 <- lm(mpg~am+cyl+wt,data=mtcars)
summary(fit3)
anova(fit3)
fit2 <- lm(mpg~am+cyl,data=mtcars)
summary(fit2)
anova(fit2)
anova(fit1,fit2,fit3,fit4,fitAll)
AIC(fit1,fit2,fit3,fit4,fitAll)
resid(fit1)
plot(resid(fit1))
plot(resid(fit2))
plot(resid(fit3))
plot(resid(fit4))
par(mfrow=c(3,2))
plot(resid(fit1))
par(mfrow=c(3,3))
plot(resid(fit1))
par(mfrow=c(1,1))
plot(resid(fitAll))
plot(resid(fit1))
plot(resid(fit2))
plot(resid(fitAll), main="fitAll")
plot(resid(fit1), main="fit1")
plot(resid(fit2), main="fit2")
plot(resid(fit3), main="fit3")
plot(resid(fit4), main="fit4")
summary(fit3)
summary(fit1)
hist(resid(fit1), main="fit1")
hist((resid(fit1)-mean(resid(fit1)))/sd(resid(fit1)), main="fit1")
hist((resid(fit1)-mean(resid(fit1)))/sd(resid(fit1)), main="mpg~am")
cor.test(mtcars$mpg,mtcars$am)
cor(mtcars$mpg,mtcars$am)
fit1$coefficients[1]
fit1$coefficients[2]
summary(fit1)
hist((resid(fit1)-mean(resid(fit1)))/sd(resid(fit1)), main="mpg~am")
hist((resid(fit1)-mean(resid(fit1)))/sd(resid(fit1)), xlab="Residuals (standardised)", main="Model of MPG Using only Transmission (am)")
hist((resid(fit1)-mean(resid(fit1)))/sd(resid(fit1)), xlab="Residuals (standardised)", main="Model of MPG Using only Transmission (am)", col="lightyellow")
hist((resid(fit1)), xlab="Residuals (standardised)", main="Model of MPG Using only Transmission (am)", col="lightyellow")
hist(resid(fit1), xlab="Residuals", main="Model of MPG Using only Transmission (am)", col="lightyellow")
x <- summary(fit1)
x
names(x)
x$r.squared
anova(fit1,fit2)
anova(fit2,fit1)
x <- AIC(fit1,fit2,fit3,fit4,fitAll)
x
names (x)
min(x$AIC)
x[,min(x$AIC)]
x[min(x$AIC),]
x[min(x$AIC)]
x[,x$AIC == min(x$AIC)]
x[x$AIC == min(x$AIC),]
fit1 <- lm(mtcars$mpg~mtcars$am)
s1 <- summary(fit1)
names(s1)
s1
s1$r.squared
s1$cov.unscaled
s1
names(x)
names(s1)
s1$sigma
s1$terms
names(s1)
s1
names(s1)
s1$call
s1$p.value
s1$p-value
s1$pvalue
s1$aliased
s1$fstatistic
s1
s1$fstatistic
s1$" "
s1$""
rm(x0)
rm(x1)
names(fit1)
fit1$model
fit$df.residual
fit$residuals
fit1$df.residual
fit1$residuals
glm(mpg~am)
hist(resid(fit3), xlab="Residuals", main="Model with am+cyl+wt Prefictors")
hist(resid(fit3), xlab="Residuals", main="Model with am+cyl+wt Predictors")
hist(resid(fit1), xlab="Residuals", main="Model with am Predictors")
hist(resid(fit2), xlab="Residuals", main="Model with am+cyl Predictors")
hist(resid(fit4), xlab="Residuals", main="Model with am+cyl+wt+disp Predictors")
hist(resid(fitAll), xlab="Residuals", main="Model with All Predictors")
predict(fit3,data=mtcars,interval=("confidence"))
summary(fit3)
confint(fit3)
anova(fit3)
bestModel <- x[x$AIC == min(x$AIC),]
bestModel
s3
summary(fit3)
s3 <- summary(fit3)
names(s3)
s3$residuals
s3$coefficient
s3
s3
names(s3)
s3$coefficients
names(s3$coefficients)
s3$coefficients[1]
s3$coefficients[1,]
s3$coefficients[2,]
names(s3$coefficients)
s3$coefficients
2*1.3044515
0.1764932-2*1.3044515
0.1764932+2*1.3044515
-0.01808-2*0.01671
-0.01808+2*0.01671
s3
s3 <- summary(fit3)
s3
s3$coefficients
plot(mtcars$cyl,mtcars$mpg)
abline(fit3$coefficients[1], fit3$coefficients[2], col="red", lty=2)
abline(fit3$coefficients[1], fit3$coefficients[2], col="red", lty=2)
plot(mtcars$cyl,mtcars$mpg)
fit3$coefficients[1]
plot(cyl ~ mpg, data = mtcars)
abline(fit3$coefficients[1], fit3$coefficients[2], col = "red", lty = 2)
plot(cyl ~ mpg, data = mtcars)
abline(fit3$coefficients[1], fit3$coefficients[2], col = "red", lty = 2)
plot(wt ~ mpg, data = mtcars)
abline(fit3$coefficients[1], fit3$coefficients[2], col = "red", lty = 2)
lines(fit3$coefficients[1], fit3$coefficients[2], col = "red", lty = 2)
line(fit3$coefficients[1], fit3$coefficients[2], col = "red", lty = 2)
abline(fit3$coefficients[1]/10, fit3$coefficients[2], col = "red", lty = 2)
abline(fit3$coefficients[1]/10, fit3$coefficients[2]/10, col = "red", lty = 2)
plot(cyl ~ mpg, data = mtcars)
abline(fit3$coefficients[1]/10, fit3$coefficients[2]/10, col = "red", lty = 2)
abline(cyl,fit3$coefficients[1]+fit3$coefficients[2]*cyl, col = "red", lty = 2)
plot(cyl ~ mpg, data = mtcars)
abline(cyl,fit3$coefficients[1]+fit3$coefficients[2]*cyl, col = "red", lty = 2)
plot(mpg~cyl, data = mtcars)
abline(cyl,fit3$coefficients[1]+fit3$coefficients[2]*cyl, col = "red", lty = 2)
abline(mpg,fit3$coefficients[1]+fit3$coefficients[2]*cyl, col = "red", lty = 2)
plot(mpg~wt, data = mtcars)
abline(wt,fit3$coefficients[1]+fit3$coefficients[2]*wt, col = "red", lty = 2)
abline(fit3$coefficients[1]+fit3$coefficients[2]*wt, col = "red", lty = 2)
abline(mtcars$wt, fit3$coefficients[1]+fit3$coefficients[2]*mtcars$wt, col = "red", lty = 2)
plot(mtcars$mpg~mtcars$wt, data = mtcars)
abline(mtcars$wt, fit3$coefficients[1]+fit3$coefficients[2]*mtcars$wt, col = "red", lty = 2)
abline(mtcars$wt, fit3$coefficients[1]+fit3$coefficients[2]*mtcars$wt, col = "red", lty = 2)
s3
abline(mtcars$wt, 39.4179+(-3.1251)*mtcars$wt, col = "red", lty = 2)
library(markdown)
require(knitr)
require(markdown)
names(s3)
s3$residuals
names(s3)
s3$adj.r.squared
plot(fit1)
hist(resid(fit1), xlab="Residuals", main="Model of MPG Using only Transmission (am)", col="lightyellow")
x <- plot(fit1)
par(mfrow=c(2,2))
plot (fit1)
fit3
summary(fit3)
s3 <- summary(fit3)
names(s3)
s3$rse
s3$aliased
s3$cov.unscaled
s3$cov.df
summary(fit3)
names(s3)
s3$adj.r.squared
s3$residuals
s3$coefficients
par(mfrow=c(2,2))
par(mfrow=c(2,3))
hist(resid(fit1), xlab="Residuals", main="Model of MPG Using only Transmission (am)", col="lightyellow")
plot (fit1)
